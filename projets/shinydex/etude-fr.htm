<p>Le but de ce projet était de présenter certaines informations, enregistrées dans une base de données, dans un site web répliquant le plus possible l’apparence et le fonctionnement d’une application Android native. À partir de ce souhait, j’ai formulé les contraintes suivantes :</p>

<ul>
  <li>le design devait se rapprocher le plus possible de Material Design, alors utilisé par Google et bien d’autres applications Android</li>
  <li>les transitions entre les différentes pages ou sections devaient être animées et fluides</li>
  <li>la navigation devait être possible via le bouton Précédent du système Android</li>
  <li>le site web devait fonctionner, d’une manière la plus complète possible, en l’absence de connexion internet</li>
</ul>

<p>Je n’avais alors jamais réalisé de projet vérifiant toutes ces contraintes. Mais voici les solutions que j’ai appliquées pour construire le Rémidex en tant qu’application web les vérifiant.</p>

<div class="separator"></div>

<p>Pour que l’apparence de l’application corresponde à mes envies, j’ai décidé dès le début du projet d’utiliser <a href="https://getmdl.io/" target="_blank" rel="noopener">Material Design Lite (MDL)</a>. Ainsi, les différents éléments du Rémidex ont facilement eu l’apparence souhaitée (barre de titre, menu déroulant, cartes, etc).</p>

<p>Le travail ne s’est pas arrêté là, et j’ai apporté beaucoup de modifications à cette base.</p>

<p>Material Design a évolué au fil du temps, mais Material Design Lite n’a pas suivi ces évolutions. J’ai programmé moi-même les changements qui me plaisaient, soit pour correspondre aux avancées de MD, soit pour correspondre à mes besoins sur l’application.</p>

<figure>
  <div style="--largeur-max: 20rem; --w: 720; --h: 1354;"><img src="/mon-portfolio/projets/shinydex/images/appli-actuelle.jpg" width="780" height="1354" alt="" loading="lazy"></div>
  <figcaption>Le design actuel de l'application</figcaption>
</figure>

<p>Les deux exemples les plus frappants sont la barre de titre de l’application, et le menu déroulant.</p>

<p>À l’origine, la barre de titre était fixée tout en haut de l’application et contenait le bouton de menu, le titre de la section en cours, et les divers boutons correspondants. Aujourd’hui, cette barre de titre et les contrôles qu’elle contenait ont été déplacés tout en bas de l’application, pour être facilement atteignable sur un grand smartphone. Google eux-mêmes ont réalisé un changement similaire sur certaines applications (comme <a href="https://play.google.com/store/apps/details?id=com.google.android.apps.tasks" target="_blank">Google Tasks</a>).</p>

<p>Cependant, avoir le titre de la section en cours en bas de l’écran me paraissait peu naturel. J’ai donc laissé le titre en haut, et je l’ai programmé pour qu’il se cache ou réapparaisse dynamiquement quand je fais défiler le contenu d’une section.</p>

<figure>
  <div style="--largeur-max: 20rem; --w: 720; --h: 720;"><video loop muted controls width="720" height="720">
    <source src="/mon-portfolio/projets/shinydex/images/animation-titre.mp4" type="video/mp4">
  </video></div>
  <figcaption>Le titre apparaît et disparaît en défilant</figcaption>
</figure>

<p>Quant au menu déroulant, dans la même idée, il apparaît maintenant en sortant du bas de l’application, et non plus de la gauche. De plus, son apparence a été modifiée pour donner l’impression que c’est la barre de titre qui s’étend et devient ce menu.</p>

<figure>
  <div style="--largeur-max: 20rem; --w: 720; --h: 1354;"><img src="/mon-portfolio/projets/shinydex/images/menu.jpg" width="720" height="1354" alt="" loading="lazy"></div>
  <figcaption>Le menu de navigation</figcaption>
</figure>

<p>Enfin, j’ai programmé ce menu pour qu’il puisse être ouvert soit en tapant sur le bouton menu (comportement prévu par MDL), soit en glissant son doigt du bas vers le haut (non implémenté par MDL). Dans le deuxième cas, le menu suit la position du doigt jusqu’à relâcher le contact avec l’écran.</p>

<figure>
  <div style="--largeur-max: 20rem; --w: 720; --h: 850;"><video loop muted controls width="720" height="850">
    <source src="/mon-portfolio/projets/shinydex/images/animation-menu.mp4" type="video/mp4">
  </video></div>
  <figcaption>Le menu suit le glissement du doigt</figcaption>
</figure>

<p>J’ai implémenté de nombreuses autres modifications, et plus le temps passe, moins l’application repose sur MDL. Elle ne s’est est cependant pas encore totalement affranchie.</p>

<div class="separator"></div>

<p>Pour que le Rémidex ressemble le plus possible à une application Android, il ne fallait pas qu’il soit constitué de différentes pages telles que je naviguerais de l’une à l’autre en cliquant des liens. Il fallait plutôt qu’il soit constitué d’une seule page, donc le contenu serait modifié via Javascript selon l’interaction de l’utilisateur avec l’appli.</p>

<p>C’est donc ainsi que j’ai conçu l’application. Toutes les sections sont techniquement “là” dès le départ, elles sont juste masquées, puis affichées quand la section correspondante est appelée via le menu de navigation. J’ai animé l’apparition de chaque section, pour que la navigation de l’application paraisse fluide. Cette animation reste rapide et discrète pour ne pas trop retarder l’apparition des informations demandées à l’écran.</p>

<figure>
  <div style="--largeur-max: 20rem; --w: 720; --h: 1354;"><video loop muted controls width="720" height="1354">
    <source src="/mon-portfolio/projets/shinydex/images/animation-section.mp4" type="video/mp4">
  </video></div>
  <figcaption>Animation d'apparition d'une section</figcaption>
</figure>

<p>Cependant, pour apporter un peu plus de fantaisie et de plaisir à l’ouverture de l’application, et souhaiter la bienvenue sur le Rémidex, c’est une animation différente qui se joue lors de son ouverture, plus longue et plus complexe.</p>

<figure>
  <div style="--largeur-max: 20rem; --w: 720; --h: 1354;"><video loop muted controls width="720" height="1354">
    <source src="/mon-portfolio/projets/shinydex/images/animation-ouverture.mp4" type="video/mp4">
  </video></div>
  <figcaption>Animation d'apparition de la section à l'ouverture de l'appli</figcaption>
</figure>

<p>En-dehors des changements de section, l’application est remplie de petites animations vouées à fluidifier la navigation et la rendre plus plaisante. Par exemple, lors de l’ouverture d’une sous-section, le bouton de menu se transforme en bouton précédent.</p>

<figure>
  <div style="--largeur-max: 20rem; --w: 720; --h: 156;"><video loop muted controls width="720" height="156">
    <source src="/mon-portfolio/projets/shinydex/images/animation-bouton-menu.mp4" type="video/mp4">
  </video></div>
  <figcaption>Transformation du bouton de menu</figcaption>
</figure>

<p>Autre exemple : dans la section “Pokédex”, cliquer sur l’icône d’une créature déclenche l’ouverture de ce que j’appelle la “visionneuse d’images”, une fenêtre contenant les images correspondant à ladite créature. Cette fenêtre s’anime comme si elle s’ouvrait en provenance de l’icône cliquée.</p>

<figure>
  <div style="--largeur-max: 20rem; --w: 720; --h: 1354;"><video loop muted controls width="720" height="1354">
    <source src="/mon-portfolio/projets/shinydex/images/animation-visionneuse.mp4" type="video/mp4">
  </video></div>
  <figcaption>L'animation dépend de l'endroit où l'utilisateur clique</figcaption>
</figure>

<p>C’est une animation avec plusieurs composantes : la fenêtre s’ouvre en provenant de l’icône, mais cette animation est raccourcie pour ne pas retarder son apparition tout en conservant l’impression de provenance. La barre de titre, en bas, se colore aussi en accord avec la fenêtre qui s’ouvre, en suivant précisément son animation. Enfin, le bouton de menu se transforme en bouton “fermer” avec l’animation vue précédemment.</p>

<div class="separator"></div>

<p>A début du développement du Rémidex, les requêtes pour charger les images des centaines de Pokémon différents prenaient un temps reativement long (plus d'une dizaine de secondes), rallongeant le chargement de l'application.</p>

<figure>
  <div style="--largeur-max: 20rem; --w: 720; --h: 1242;"><img src="/mon-portfolio/projets/shinydex/images/tiles-needed.jpg" width="720" height="1242" alt="" loading="lazy"></div>
  <figcaption>Charger toutes ces images une par une prenait beaucoup trop longtemps</figcaption>
</figure>

<p>Pour corriger ce problème, j'utilise désormais PHP pour rassembler dynamiquement toutes les images qui devront être affichées dans chaque section sur une seule grande image. Après ça, il n'y a plus qu'une seule requête à faire, et les secondes d'attente s'évaporent.</p>

<div class="separator"></div>

<p>Puisque l’application est constituée d’une seule page, naviguer entre les sections ne créait pas naturellement de nouvelle entrée dans l’historique du navigateur. Ainsi, il n’était pas possible de retourner dans la section précédente en cliquant sur le bouton Précédent. J’ai donc programmé ce comportement moi-même en utilisant l’interface History en Javascript.</p>

<figure>
  <div style="--largeur-max: 20rem; --w: 720; --h: 1434;"><video loop muted controls width="720" height="1434">
    <source src="/mon-portfolio/projets/shinydex/images/back-button.mp4" type="video/mp4">
  </video></div>
  <figcaption>Le bouton Précédent fonctionne</figcaption>
</figure>

<p>Naviguer entre les sections est donc possible grâce aux boutons Précédent ou Suivant du navigateur, ainsi qu’avec le bouton Précédent du système Android. Ce comportement a ensuite dû être adapté à certains comportements de l’application (par exemple : si le menu est ouvert, appuyer sur Précédent le ferme sans naviguer vers la section précédemment visitée).</p>

<div class="separator"></div>

<p>Afin de pouvoir utiliser l’application hors-ligne, et de pouvoir l’installer sur mon téléphone et l’utiliser comme une application native, il m’a fallu utiliser un service worker. N’étant pas familier avec ce concept au départ, je m’étais tourné vers <a href="https://www.talater.com/upup/" target="_blank" rel="noopener">UpUp</a>. Cependant, n’étant pas satisfait de son fonctionnement, j’ai fini par programmer mon propre service worker. Cela m’a permis de mieux en comprendre le fonctionnement, et d’avoir un contrôle précis sur le comportement de l’application et le stockage de ses données, selon la présence d’une connexion internet ou non.</p>

<p>Ainsi, l’application peut être installée sur smartphone à partir d’un navigateur internet, et se comporte à peu près comme une application Android native, que ma connexion soit activée ou non.</p>

<p>De plus, l’application est conçue pour fonctionner par défaut sans connexion internet. C’est-à-dire que, une fois installée, même si internet est disponible, l’application ne consomme pas de données pour se charger : tout est déjà installé et disponible localement.</p>

<p>Cela a cependant présenté un inconvénient : si l’application était mise à jour en ligne, la version installée localement ne pouvait pas le savoir et télécharger les nouvelles données. J’ai donc mis en place une fonction de mise à jour, qui peut être appelée manuellement ou à chaque démarrage de l’application. Ainsi, les données mobiles ne sont que brièvement utilisées pour vérifier si une mise à jour est disponible à l’appui sur un bouton (ou au démarrage de l’appli, si l’option est cochée).</p>